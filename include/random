# random

.if .include.inc("random",.type.vlist);
	.exit ;

# init
random.try {
	# version
	var vlist:(limit,version);
	.include.version(version,1,0,0);
	.include.version(limit,1,6,0);
	add(.const.error,.type.string);
	.if limit.value > .sys.version.value; .exit error="limit version >= "+limit.string;
	# include
	try {
		include "randseq";
		.if randseq[.const.error]; .exit error="include randseq error";
	} , {
		error="include file error";
	} ;
} , {
	.if ![.const.error]; error="try init error";
} ;
.if random[.const.error]; .exit ;

# define
random.var string:type="random";
random.function void:init_method(rdm:.type.object, method:.type.string|.type.void)
{
	# rs
	rdm.var vlist:rs;
	.include.randseq.init(rdm.rs,method);
	rdm.rs.loop(16);
	
	# rand
	rdm.function void:rand(i:.type.num|.type.void)
	{
		t=.get_type(i);
		.if t==.type.void;
			.gotodw void;
		.if t&.type.num&&!.length(i);
			.gotodw number;
		
		#void;
		var uint:_ret_=rs.get();
		.exit ;
		
		#number;
		.if t==.type.float;
			.gotodw float;
		var long:_ret_;
		rs.get()@.float/(2**32)*i@_ret_;
		.exit ;
		
		#float;
		var float:_ret_=rs.get();
		_ret_/(2**32)*i@_ret_;
		.exit ;
		
	} ;
	rdm.rand.var refer:rs=rdm.rs,uint:t;
	
	# srand
	rdm.function void:srand(i:.type.snum|.type.void|.type.allowarray)
	{
		t=.get_type(i);
		.if t==.type.void;
			.gotodw time;
		.if t==.type.string?(.strlen(i)>0):0;
			.gotodw string;
		.if t&.type.num&&!.length(i);
			.gotodw number;
		.if t&.type.num&&.length(i);
			.gotodw array;
		.exit ;
		
		#time;
		rs.set(.time.stamp()^.time.clock());
		.exit ;
		
		#number;
		.if t==.type.long;
			.gotodw long;
		.if t==.type.float;
			.gotodw float;
		rs.set(i);
		.exit ;
		#long;
		rs.set(i/(2**32)^i&0xffffffff);
		.exit ;
		#float;
		rs.set(.ftol(i)/(2**32)^.ftol(i)&0xffffffff);
		.exit ;
		
		#string;
		rs.setinput(i);
		rs.mode("LoopInput");
		.if rs.curmode=="LoopInput"; rs.loop(.strlen(i));
		rs.setinput();
		.exit ;
		
		#array;
		rs.setinput(i);
		rs.mode("LoopInput");
		.if rs.curmode=="LoopInput"; rs.loop(.length(i));
		rs.setinput();
		.exit ;
	} ;
	rdm.srand.var refer:rs=rdm.rs,uint:t;
	
	# type
	rdm.var string:type;
	rdm.type=type;
} ;
random.init_method.var refer:type=random.type;
random.function void:init(rdm:.type.object) {
	init_method(rdm,.void);
} ;
random.init.var refer:init_method=random.init_method;

